"""
Dashboard ICE - Archivo Principal - Versi√≥n corregida
Sistema de monitoreo y seguimiento de indicadores de la Infraestructura de Conocimiento Espacial
"""

import streamlit as st
import os
import pandas as pd
from config import configure_page, apply_dark_theme, CSV_FILENAME
from data_utils import DataLoader
from filters import FilterManager
from tabs import TabManager

def main():
    """Funci√≥n principal del dashboard"""
    
    # Configurar p√°gina
    configure_page()
    apply_dark_theme()
    
    # T√≠tulo principal
    st.title("üìä Dashboard de Indicadores ICE")
    st.markdown("Sistema de monitoreo y seguimiento de indicadores")
    
    # A√±adir opci√≥n de debug
    debug_mode = st.sidebar.checkbox("Modo Debug", value=True)
    
    # Cargar datos
    data_loader = DataLoader()
    
    if debug_mode:
        st.sidebar.header("üîß Informaci√≥n de Debug")
    
    df = data_loader.load_data()
    
    if df is not None and len(df) > 0:
        try:
            # Mostrar informaci√≥n b√°sica de los datos
            if debug_mode:
                with st.expander("üìã Informaci√≥n de los datos cargados"):
                    col1, col2, col3 = st.columns(3)
                    with col1:
                        st.metric("Total registros", len(df))
                    with col2:
                        st.metric("Indicadores √∫nicos", df['Indicador'].nunique())
                    with col3:
                        st.metric("Fechas √∫nicas", df['Fecha'].nunique())
                    
                    st.subheader("Primeros 5 registros:")
                    st.dataframe(df.head())
                    
                    st.subheader("Informaci√≥n por columna:")
                    st.write(df.dtypes)
            
            # Crear sistema de filtros
            filter_manager = FilterManager(df)
            filters = filter_manager.create_sidebar_filters()
            
            # Aplicar filtros
            df_filtrado = filter_manager.apply_filters(df)
            
            if debug_mode:
                st.sidebar.write(f"Registros despu√©s del filtro: {len(df_filtrado)}")
            
            # Mostrar informaci√≥n de filtros activos
            active_filters = filter_manager.get_filter_info()
            if active_filters:
                st.sidebar.markdown("**üîç Filtros activos:**")
                for filter_info in active_filters:
                    st.sidebar.markdown(f"- {filter_info}")
            
            # Verificar que hay datos despu√©s del filtro
            if len(df_filtrado) == 0:
                st.warning("‚ö†Ô∏è No hay datos que coincidan con los filtros seleccionados. Intenta cambiar los filtros.")
                st.info("üí° Sugerencia: Selecciona 'Todos' en los filtros para ver todos los datos disponibles.")
                
                # Mostrar datos sin filtrar como referencia
                with st.expander("Ver todos los datos disponibles"):
                    st.dataframe(df)
            else:
                # Renderizar pesta√±as
                tab_manager = TabManager(df, data_loader.csv_path)
                tab_manager.render_tabs(df_filtrado, filters)
            
            # Informaci√≥n adicional en sidebar
            render_sidebar_info(debug_mode)
            
        except Exception as e:
            st.error(f"‚ùå Error al procesar datos: {e}")
            st.info("üîß Activa el modo debug para ver m√°s informaci√≥n.")
            
            if debug_mode:
                st.exception(e)
    
    else:
        show_error_message()

def render_sidebar_info(debug_mode=False):
    """Renderizar informaci√≥n adicional en la barra lateral"""
    st.sidebar.markdown("---")
    
    if debug_mode:
        st.sidebar.header("üéØ Estado del Sistema")
        try:
            # Informaci√≥n del entorno
            st.sidebar.write(f"Python: {os.sys.version.split()[0]}")
            st.sidebar.write(f"Pandas: {pd.__version__}")
            st.sidebar.write(f"Streamlit: {st.__version__}")
            
            # Informaci√≥n del directorio
            current_dir = os.getcwd()
            st.sidebar.write(f"Directorio actual: {os.path.basename(current_dir)}")
            
        except Exception as e:
            st.sidebar.error(f"Error obteniendo info del sistema: {e}")
    
    st.sidebar.info("""
    üìä **Dashboard ICE**
    
    Este dashboard permite monitorear y analizar los indicadores clave de desempe√±o de la Infraestructura de Conocimiento Espacial, con visualizaciones interactivas y c√°lculos autom√°ticos de puntajes.
    
    **Navegaci√≥n:**
    - üìà **Resumen General**: Vista global de indicadores
    - üèóÔ∏è **Por Componente**: An√°lisis detallado por √°rea
    - üìä **Evoluci√≥n**: Tendencias temporales
    - üìã **Tabla Din√°mica**: An√°lisis cruzado
    - ‚úèÔ∏è **Edici√≥n**: Actualizar valores
    """)
    
    # Cr√©ditos
    st.sidebar.markdown("---")
    st.sidebar.markdown("**¬© 2025 Dashboard ICE**")
    st.sidebar.markdown("**IDECA - Bogot√° D.C.**")

def show_error_message():
    """Mostrar mensaje de error cuando no se puede cargar el archivo"""
    st.error(f"""
    ### ‚ùå Error al cargar el archivo de indicadores

    No se pudo encontrar o abrir el archivo `{CSV_FILENAME}`. 

    **üõ†Ô∏è Posibles soluciones:**
    
    1. **Verificar archivo**: Aseg√∫rate de que el archivo `{CSV_FILENAME}` existe
    2. **Ubicaci√≥n**: El archivo debe estar en el mismo directorio que este script
    3. **Formato**: Verifica que usa punto y coma (;) como separador
    4. **Encoding**: Aseg√∫rate de que est√° guardado en UTF-8
    5. **Permisos**: Comprueba que tienes permisos de lectura
    """)

    # Mostrar informaci√≥n de diagn√≥stico
    try:
        current_dir = os.getcwd()
        files_in_dir = [f for f in os.listdir(current_dir) if f.endswith('.csv')]
        
        st.info(f"""
        **üîç Informaci√≥n de diagn√≥stico:**
        - **Directorio actual**: `{current_dir}`
        - **Archivos CSV encontrados**: {', '.join(files_in_dir) if files_in_dir else 'Ninguno'}
        - **Archivo buscado**: `{CSV_FILENAME}`
        """)
        
        if files_in_dir:
            st.success("üí° Se encontraron archivos CSV. Verifica que el nombre coincida exactamente.")
        
    except Exception as e:
        st.warning(f"‚ö†Ô∏è No se pudo obtener informaci√≥n del directorio: {e}")

def check_streamlit_issues():
    """Verificar problemas comunes de Streamlit"""
    try:
        # Verificar versi√≥n de Streamlit
        import streamlit as st
        version = st.__version__
        
        # Sugerir actualizaci√≥n si es necesario
        if version < "1.28.0":
            st.sidebar.warning(f"‚ö†Ô∏è Streamlit {version} detectado. Considera actualizar a la versi√≥n m√°s reciente.")
            
    except Exception as e:
        st.sidebar.error(f"Error verificando Streamlit: {e}")

if __name__ == "__main__":
    # Verificar problemas de Streamlit
    check_streamlit_issues()
    
    # Ejecutar aplicaci√≥n principal
    main()
